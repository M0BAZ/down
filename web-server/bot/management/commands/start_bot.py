import time
import requests
from django.core.management.base import BaseCommand
from file_upload_app.models import UploadedFile
from django.conf import settings
from django.contrib.auth.models import User
from file_upload_app.models import UserSession

TELEGRAM_API_URL = f"https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
def get_updates(offset=None):
    url = TELEGRAM_API_URL + "getUpdates"
    params = {"timeout": 100, "offset": offset}
    response = requests.get(url, params=params)
    return response.json()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    return {
        "keyboard": [
            [{"text": "üîë –í–æ–π—Ç–∏"}, {"text": "üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã"}],
            [{"text": "‚ÑπÔ∏è –û –±–æ—Ç–µ"}, {"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_message(chat_id, text, keyboard=None):
    url = TELEGRAM_API_URL + "sendMessage"
    data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if keyboard:
        data["reply_markup"] = keyboard
    requests.post(url, json=data)


# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(chat_id, username, password):
    try:
        user = User.objects.get(username=username)
        if user.check_password(password):
            UserSession.objects.filter(telegram_id=str(chat_id)).delete()
            UserSession.objects.filter(user=user).delete()
            UserSession.objects.create(user=user, telegram_id=str(chat_id), is_logged_in=True)
            send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        else:
            send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except User.DoesNotExist:
        send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def send_file(chat_id, file_path):
    url = TELEGRAM_API_URL + "sendDocument"
    with open(file_path, 'rb') as file_data:
        data = {"chat_id": chat_id}
        files = {"document": file_data}
        requests.post(url, data=data, files=files)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def handle_update(update):
    message = update.get("message")
    if not message:
        return

    chat_id = message["chat"]["id"]
    text = message.get("text")

    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if text == "/start" or text == "‚ùì –ü–æ–º–æ—â—å":
        send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", create_keyboard())

    elif text == "üîë –í–æ–π—Ç–∏":
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

    elif text.startswith("/login"):
        if text.count(" ") == 2:
            try:
                _, username, password = text.split()
                authenticate_user(chat_id, username, password)
            except ValueError:
                send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å'")
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Ä–∞–∑–¥–µ–ª—å–Ω–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞")

    elif text == "üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã":
        try:
            user_session = UserSession.objects.get(telegram_id=str(chat_id))
            if user_session.is_logged_in:
                files = UploadedFile.objects.all()
                if files.exists():
                    file_list = "\n".join([file.file_name for file in files])
                    send_message(chat_id, f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:\n{file_list}")
                else:
                    send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            else:
                send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")
        except UserSession.DoesNotExist:
            send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")

    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        send_message(chat_id,
                     "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login.")

    elif text == "/files":
        try:
            user_session = UserSession.objects.get(telegram_id=str(chat_id))
            if user_session.is_logged_in:
                files = UploadedFile.objects.all()
                if files.exists():
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": file.file_name, "callback_data": f"file_{file.id}"}] for file in files
                        ]
                    }
                    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", keyboard)
                else:
                    send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            else:
                send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")
        except UserSession.DoesNotExist:
            send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")

    elif text.lower().startswith("file_"):
        file_id = text.split("_")[1]
        try:
            uploaded_file = UploadedFile.objects.get(id=file_id)
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
            file_path = uploaded_file.file.path
            with open(file_path, 'rb') as file:
                requests.post(f"https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/sendDocument", data={
                    'chat_id': chat_id,
                }, files={'document': file})
        except UploadedFile.DoesNotExist:
            send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        except:
            send_message(chat_id, "–û—à–∏–±–∫–∞")

    elif "–∏–∑–≤–∏–Ω–∏" in text.lower():
        send_message(chat_id, "–ü–∞—Ü–∞–Ω—ã –Ω–µ –∏–∑–≤–∏–Ω—è—é—Ç—Å—è")

    elif text.lower() == "—Å–æ—Å–∞–ª?":
        send_message(chat_id, "–°–∞–º —Å–æ—Å–∞–ª, —É –º–µ–Ω—è —Ç–≤–æ–π ip, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ª–æ—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –ø–æ–≤—ã–∫–∞–±–µ–Ω–∏–≤–∞—Ç—å—Å—è.")

    else:
        send_message(chat_id, "–Ø —Ö–∑ –æ —á–µ–º —Ç—ã")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling"

    def handle(self, *args, **kwargs):
        self.stdout.write("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        offset = None
        while True:
            try:
                updates = get_updates(offset)
                for update in updates.get("result", []):
                    handle_update(update)
                    offset = update["update_id"] + 1
                time.sleep(1)
            except Exception as e:
                self.stderr.write(f"–û—à–∏–±–∫–∞: {e}")
                time.sleep(5)
